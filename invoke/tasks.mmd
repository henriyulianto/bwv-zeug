%%{init: {'theme':'neutral'}}%%
graph TD

%% ============================================================================
%% INPUT NODES
%% ============================================================================
I1[BWV000.ly<br/>📄 Main Score]
I2[BWV000_ly_one_line.ly<br/>📄 One-line Score]
I3[BWV000_ly_main.ly<br/>📄 Shared Dependencies]

%% ============================================================================
%% TASK NODES
%% ============================================================================
T1[pdf]
T2[svg]
T3[svg_one_line]
T4[no_tabs]
T5[swell]
T6[optim]
T7[noteheads]
T8[timing]
T9[align]
T0[ties]
T11[squash]

%% ============================================================================
%% RUNNABLE NODES
%% ============================================================================
R1[docker run -v PWD:/work codello/lilypond:dev INCLUDES       BWV000.ly && mkdir -p exports && mv BWV000.pdf exports<br/>🐳 LilyPond PDF]
R2[docker run -v PWD:/work codello/lilypond:dev INCLUDES --svg BWV000.ly<br/>🐳 LilyPond SVG]
R3[docker run -v PWD:/work codello/lilypond:dev INCLUDES --svg BWV000_ly_one_line.ly<br/>🐳 LilyPond One-line SVG, ready for extract ties, and MIDI]
R4[bwv_script:no_hrefs_in_tabs.py BWV000.svg<br/>🔗 Remove tab links]
R5[bwv_script:ensure_swellable.py BWV000_no_hrefs_in_tabs.svg<br/>🎯 Animation prep]
R6[bwv_script:optimize.py BWV000_no_hrefs_in_tabs_swellable.svg<br/>⚡ SVGO optimization]
R7[bwv_script:extract_note_heads.py -i BWV000_ly_one_line.svg -o BWV000_note_heads.csv<br/>📍 Extract notehead positions]
R8[bwv_script:extract_note_events.py -i BWV000_ly_one_line.midi -o BWV000_note_events.csv<br/>⏱️ Extract MIDI timing]
R9[bwv_script:align_data.py -im BWV000_note_events.csv -is BWV000_note_heads_squashed.csv -o exports/BWV000_json_notes.json<br/>🎯 Align MIDI↔SVG]
R0[bwv_script:extract_ties.py -i BWV000_ly_one_line.svg -o BWV000_ties.csv<br/>🔗 Extract Ties]
R11[bwv_script:squash-tied-note-heads.py -i BWV000_note_heads.csv -t BWV000_ties.csv -o BWV000_note_heads_squashed.csv<br/>🎵 Squash tied noteheads]

%% ============================================================================
%% OUTPUT NODES
%% ============================================================================
O2[BWV000.svg<br/>🎼 Main SVG Score]
O3[BWV000_ly_one_line.svg<br/>🎼 One-line SVG]
O4[BWV000_ly_one_line.midi<br/>🎵 MIDI Data]
O5[BWV000_no_hrefs_in_tabs.svg<br/>🔄 Processed SVG]
O6[BWV000_no_hrefs_in_tabs_swellable.svg<br/>🎯 Animation-ready SVG]
O7[BWV000_note_heads.csv<br/>📊 SVG Noteheads Data]
O8[BWV000_note_events.csv<br/>📊 MIDI Events Data]
O9[BWV000_ties.csv<br/>📊 Ties Data]
O10[BWV000_note_heads_squashed.csv<br/>📊 Squashed Noteheads Data]

%% ============================================================================
%% EXPORT NODES
%% ============================================================================
E3[exports/BWV000.pdf<br/>📑 PDF Output]
E1[exports/BWV000_optimized.svg<br/>🎨 Final Animated SVG]
E2[exports/BWV000_json_notes.json<br/>🎵 Synchronized Animation Data]

%% ============================================================================
%% DEPENDENCY RELATIONSHIPS
%% ============================================================================
%% Shared dependencies
I3 --> I1
I3 --> I2

%% Input to task relationships
I1 --> T1
I1 --> T2
I2 --> T3

%% Task to runnable relationships
T1 --> R1
T2 --> R2
T3 --> R3
T4 --> R4
T5 --> R5
T6 --> R6
T7 --> R7
T8 --> R8
T9 --> R9
T0 --> R0
T11 --> R11

%% Runnable to output relationships
R2 --> O2
R3 --> O3
R3 --> O4
R0 --> O9
R7 --> O7
R8 --> O8
R11 --> O10

%% SVG processing chain
O2 --> T4
R4 --> O5
O5 --> T5
R5 --> O6
O6 --> T6

%% Data extraction parallel branches
O3 --> T7
O3 --> T0
O4 --> T8

%% Squash tied noteheads step
O7 --> T11
O9 --> T11

%% Final data alignment (now uses squashed noteheads)
O10 --> T9
O8 --> T9

%% Final export
R1 --> E3
R6 --> E1
R9 --> E2

%% ============================================================================
%% STYLING
%% ============================================================================
classDef input fill:#e1f5fe,stroke:#01579b,stroke-width:2px
classDef task fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
classDef output fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
classDef runnable fill:#fff3e0,stroke:#e65100,stroke-width:2px
classDef export fill:#ffebee,stroke:#b71c1c,stroke-width:3px

class I1,I2,I3 input
class T1,T2,T3,T4,T5,T6,T7,T8,T9,T0,T10,T11 task
class O2,O3,O4,O5,O6,O7,O8,O9,O10 output
class R1,R2,R3,R4,R5,R6,R7,R8,R9,R0,R11 runnable
class E3,E1,E2 export

%% ============================================================================
%% BOTTOM ALIGNMENT HACK
%% ============================================================================
T10["🌐 Published to Web"]
style T10 fill:#ffffff,stroke:#ffffff

E1 --> T10
E2 --> T10
E3 --> T10